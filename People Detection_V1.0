#!/usr/bin/env python

# importing the necessary packages
import rospy
import string
import argparse
import time

import cv2
import imutils # which has a set of convenience functions to make basic image processing tasks easier


ap = argparse.ArgumentParser()

# Define two switches. The first, --video , is optional. It simply defines a path to a pre-recorded video file that we can detect 
# motion in. If not supply a path to a video file, then OpenCV will utilize the webcam to detect motion.

ap.add_argument("-v", "--video", help="path to the video file")
ap.add_argument("-a", "--min-area", type=int, default=1000, help="minimum area size")  
args = vars(ap.parse_args())

# if the video argument is None, then we are reading from cam

if args.get("video", None) is None:
	camera = cv2.VideoCapture(0)
	time.sleep(0.25)

# otherwise, we are reading from a video file

else:
	camera = cv2.VideoCapture(args["video"])
 
# initialize the first frame in the video stream

firstFrame = None

# loop over the frames of the video

while True:

# grab the current frame and initialize the Human Detected/No Human Detected text

	(grabbed, frame) = capture.read()
	text = "No Human Detected"	

# if the frame could not be grabbed, then we have reached the end of the video

	if not grabbed:
		break

# resize the frame, convert RGB to grayscale, and blur it

	frame = imutils.resize(frame, width=650)

	gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) 

	gray = cv2.GaussianBlur(gray, (21, 21), 0) 

 # if the first frame is None, initialize it

	if firstFrame is None:
		firstFrame = gray
		continue

# compute the absolute difference between the current frame and first frame (Segmentation/Bd. Sub.)

	frameDelta = cv2.absdiff(firstFrame, gray)      # (pixel intesty d/ce)
	thresh = cv2.threshold(frameDelta, 50, 255, cv2.THRESH_BINARY)[1]  # to segment better the foreground from the background.

# dilate the thresholded image to fill in holes, then find contours on thresholded image

	thresh = cv2.dilate(thresh, None, iterations=2)
	(cnts, _) = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)  

#loop over the contours and if the contour is too small, ignore it (i.e. filter the small, irrelevant contours)

	for c in cnts:
		
		if cv2.contourArea(c) < args["min_area"]:
			continue

# compute the bounding box for the contour, draw it on the frame and update the text accordingly 

		(x, y, w, h) = cv2.boundingRect(c)
		cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
		text = "Human Detected"

# draw the text and timestamp on the frame

	cv2.putText(frame, "BOB: {}".format(text), (10, 20),
		cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
	

# show the frame and record if the user presses a key

	cv2.imshow("TEAM_BOB Feed", frame)
	cv2.imshow("Thresh", thresh)
	key = cv2.waitKey(1) & 0xFF

# cleanup the camera 
camera.release()
